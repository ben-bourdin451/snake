!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var r=n(1),i=n(2);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],s=t.base?o[0]+t.base:o[0],d=n[s]||0,u="".concat(s," ").concat(d);n[s]=d+1;var h=c(u),l={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(a[h].references++,a[h].updater(l)):a.push({identifier:u,updater:v(l,t),references:1}),r.push(u)}return r}function d(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function l(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,y=0;function v(e,t){var n,r,i;if(t.singleton){var o=y++;n=p||(p=d(t)),r=l.bind(null,n,o,!1),i=l.bind(null,n,o,!0)}else n=d(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=c(n[r]);a[i].references--}for(var o=s(e,t),d=0;d<n.length;d++){var u=c(n[d]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=o}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,"canvas {\n\tborder: 1px solid #000000;\n\theight: 300px;\n\twidth: 500px;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,c,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&i[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},function(e,t,n){"use strict";n.r(t);var r=10,i=10;const o=r,a=i,c=1,s=2,d=3,u=4,h=37,l=38,f=39,p=40;class y{constructor(e,t,n=4){this.body=[[e,t]],this.length=n,this.prevDirection=c,this.direction=c,this.eating=!1;for(let e=1;e<n;e++)this.grow(c)}addBody(e,t){this.body.unshift([e,t])}eat(){this.eating=!0}headIsInBody(){return this.body.reduce((e,t,n)=>0!=n&&(e||t[0]===this.body[0][0]&&t[1]===this.body[0][1]),!1)}isInsideBody(e,t){return this.body.reduce((n,r)=>n||r[0]===e&&r[1]===t,!1)}grow(e){switch(e){case c:this.addBody(this.body[0][0],this.body[0][1]-a);break;case s:this.addBody(this.body[0][0]+a,this.body[0][1]);break;case d:this.addBody(this.body[0][0],this.body[0][1]+a);break;case u:this.addBody(this.body[0][0]-a,this.body[0][1])}}move(){this.checkPrevDirection(),this.grow(this.direction),this.eating?this.eating=!1:this.body.pop(),this.prevDirection=this.direction}checkPrevDirection(){switch(this.prevDirection){case c:this.direction==d&&(this.direction=c);break;case s:this.direction==u&&(this.direction=s);break;case d:this.direction==c&&(this.direction=d);break;case u:this.direction==s&&(this.direction=u)}}draw(e,t){e.fillStyle="#6B9E7D",this.body.map(n=>{n[0]=this.wrapTile(t.width,o,n[0]),n[1]=this.wrapTile(t.height,a,n[1]),e.fillRect(n[0],n[1],o,a)})}wrapTile(e,t,n){return n>=e?n-e:n<0?e-t:n}handleKeyDown(e){switch(e.keyCode){case l:this.direction=c;break;case f:this.direction=s;break;case p:this.direction=d;break;case h:this.direction=u}}getBody(){return this.body}}class v{constructor(e,t){this.x=e,this.y=t}draw(e){e.fillStyle="#DE4F60",e.fillRect(this.x,this.y,r,i)}getX(){return this.x}getY(){return this.y}}n(0);const b=r,g=i;document.body.appendChild(function(){let e=document.createElement("canvas");return e.setAttribute("id","screen"),e}());var m=document.getElementById("screen"),w=m.getContext("2d");function x(){return Math.trunc(Math.random(1)*(m.width/b))*b}function k(){return Math.trunc(Math.random(1)*(m.height/g))*g}function M(e){let t=x(),n=k();for(;e.isInsideBody(t,n);)t=x(),n=k();return new v(t,n)}console.log(m.width,m.height),function(){let e=new y(m.width/2,m.height/2),t=M(e),n=0;window.addEventListener("keydown",t=>{e.handleKeyDown(t),t.preventDefault()});let r=setInterval(()=>{if(e.move(),e.headIsInBody())return w.strokeText("Game over!",m.width/2-20,m.height/2),void window.clearInterval(r);e.isInsideBody(t.getX(),t.getY())&&(n+=10,e.eat(),t=M(e)),w.clearRect(0,0,m.width,m.height),e.draw(w,m),t.draw(w),w.strokeText("Score: "+n,0,10)},1/12*1e3)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsb2JhbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NuYWtlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJhcGkiLCJjb250ZW50IiwiZGVmYXVsdCIsIm9wdGlvbnMiLCJsb2NhbHMiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJsZW5ndGgiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwicHVzaCIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImpvaW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwidG9TdHJpbmciLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInNwbGljZSIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsInVzZVNvdXJjZU1hcCIsInRoaXMiLCJtYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsImRhdGEiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJnbG9iYWxzIiwiRElSRUNUSU9OIiwiS0VZUyIsIlNuYWtlIiwieCIsInkiLCJzaXplIiwiYm9keSIsInByZXZEaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJlYXRpbmciLCJncm93IiwidW5zaGlmdCIsInJlZHVjZSIsImFjYyIsImFkZEJvZHkiLCJjaGVja1ByZXZEaXJlY3Rpb24iLCJwb3AiLCJjdHgiLCJzY3JlZW4iLCJmaWxsU3R5bGUiLCJ3cmFwVGlsZSIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbFJlY3QiLCJtYXgiLCJ0aWxlIiwicG9zIiwiZXZlbnQiLCJrZXlDb2RlIiwiZWxlbWVudCIsImNyZWF0ZUNhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsInJhbmRvbVBvc1giLCJNYXRoIiwidHJ1bmMiLCJyYW5kb20iLCJyYW5kb21Qb3NZIiwiZ2VuZXJhdGVBcHBsZSIsInNuYWtlIiwiYXBwbGVYIiwiYXBwbGVZIiwiaXNJbnNpZGVCb2R5IiwiY29uc29sZSIsImxvZyIsImFwcGxlIiwic2NvcmUiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlS2V5RG93biIsInByZXZlbnREZWZhdWx0IiwibG9vcCIsInNldEludGVydmFsIiwibW92ZSIsImhlYWRJc0luQm9keSIsInN0cm9rZVRleHQiLCJjbGVhckludGVydmFsIiwiZ2V0WCIsImdldFkiLCJlYXQiLCJjbGVhclJlY3QiLCJkcmF3IiwibWFpbiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJF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aEIyQixFQUFNZSxLQUFLLEdBQ1gsRUFBSU4sV0FBVyxVQUFVUixFQUFTLEVBQUcsS0FDbkMsRUFwRVEsR0FvRUUsS0FHZGUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImNhbnZhcyB7XFxuXFx0Ym9yZGVyOiAxcHggc29saWQgIzAwMDAwMDtcXG5cXHRoZWlnaHQ6IDMwMHB4O1xcblxcdHdpZHRoOiA1MDBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsImNvbnN0IFRJTEVfVyA9IDEwO1xuY29uc3QgVElMRV9IID0gMTA7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0VElMRV9XLFxuXHRUSUxFX0hcbn1cbiIsImltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscy5qcyc7XG5cbmNvbnN0IFRJTEVfVyA9IGdsb2JhbHMuVElMRV9XO1xuY29uc3QgVElMRV9IID0gZ2xvYmFscy5USUxFX0g7XG5cbmNvbnN0IERJUkVDVElPTiA9IHtcblx0VVA6IDEsXG5cdFJJR0hUOiAyLFxuXHRET1dOOiAzLFxuXHRMRUZUOiA0XG59XG5cbmNvbnN0IEtFWVMgPSB7XG5cdFJFVFVSTjogMTMsXG5cdERFTEVURTogNDYsXG5cdEVTQ0FQRTogMjcsXG5cdFNQQUNFQkFSOiAzMixcblx0QVJST1dfTEVGVDogMzcsXG5cdEFSUk9XX1VQOiAzOCxcblx0QVJST1dfUklHSFQ6IDM5LFxuXHRBUlJPV19ET1dOOiA0MFxufVxuXG5jb25zdCBDT0xPVVIgPSAnIzZCOUU3RCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNuYWtlIHtcblx0Y29uc3RydWN0b3IoeCwgeSwgc2l6ZSA9IDQpIHtcblx0XHR0aGlzLmJvZHkgPSBbW3gsIHldXTtcblx0XHR0aGlzLmxlbmd0aCA9IHNpemU7XG5cdFx0dGhpcy5wcmV2RGlyZWN0aW9uID0gRElSRUNUSU9OLlVQO1xuXHRcdHRoaXMuZGlyZWN0aW9uID0gRElSRUNUSU9OLlVQO1xuXHRcdHRoaXMuZWF0aW5nID0gZmFsc2U7XG5cdFx0XG5cdFx0Ly8gR3JvdyB0byBpbml0aWFsIHNpemVcblx0XHRmb3IgKGxldCBpID0gMTsgaSA8IHNpemU7IGkrKykgeyB0aGlzLmdyb3coRElSRUNUSU9OLlVQKTsgfVxuXHR9XG5cblx0YWRkQm9keSh4LCB5KSB7XG5cdFx0Ly8gQWRkIHRvIGJvZHlcblx0XHR0aGlzLmJvZHkudW5zaGlmdChbeCwgeV0pO1xuXHR9XG5cdFxuXHRlYXQoKSB7XG5cdFx0dGhpcy5lYXRpbmcgPSB0cnVlO1xuXHR9XG5cdFxuXHRoZWFkSXNJbkJvZHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYm9keS5yZWR1Y2UoKGFjYywgZSwgaW5kZXgpID0+IHtcblx0XHRcdHJldHVybiBpbmRleCA9PSAwXG5cdFx0XHQ/IGZhbHNlXG5cdFx0XHQ6IGFjYyB8fCAoZVswXSA9PT0gdGhpcy5ib2R5WzBdWzBdICYmIGVbMV0gPT09IHRoaXMuYm9keVswXVsxXSk7XG5cdFx0fSwgZmFsc2UpXG5cdH1cblxuXHRpc0luc2lkZUJvZHkoeCwgeSkge1xuXHRcdHJldHVybiB0aGlzLmJvZHkucmVkdWNlKChhY2MsIGUpID0+IHtcblx0XHRcdHJldHVybiBhY2MgfHwgKGVbMF0gPT09IHggJiYgZVsxXSA9PT0geSk7XG5cdFx0fSwgZmFsc2UpO1xuXHR9XG5cblx0Z3JvdyhkaXJlY3Rpb24pIHtcblx0XHRzd2l0Y2ggKGRpcmVjdGlvbikge1xuXHRcdFx0Y2FzZSBESVJFQ1RJT04uVVA6XG5cdFx0XHRcdHRoaXMuYWRkQm9keSh0aGlzLmJvZHlbMF1bMF0sIHRoaXMuYm9keVswXVsxXSAtIFRJTEVfSCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIERJUkVDVElPTi5SSUdIVDpcblx0XHRcdFx0dGhpcy5hZGRCb2R5KHRoaXMuYm9keVswXVswXSArIFRJTEVfSCwgdGhpcy5ib2R5WzBdWzFdKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRElSRUNUSU9OLkRPV046XG5cdFx0XHRcdHRoaXMuYWRkQm9keSh0aGlzLmJvZHlbMF1bMF0sIHRoaXMuYm9keVswXVsxXSArIFRJTEVfSCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIERJUkVDVElPTi5MRUZUOlxuXHRcdFx0XHR0aGlzLmFkZEJvZHkodGhpcy5ib2R5WzBdWzBdIC0gVElMRV9ILCB0aGlzLmJvZHlbMF1bMV0pO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRtb3ZlKCkge1xuXHRcdHRoaXMuY2hlY2tQcmV2RGlyZWN0aW9uKCk7XG5cblx0XHR0aGlzLmdyb3codGhpcy5kaXJlY3Rpb24pO1xuXHRcdFxuXHRcdGlmICghdGhpcy5lYXRpbmcpIHtcblx0XHRcdHRoaXMuYm9keS5wb3AoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lYXRpbmcgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLnByZXZEaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjtcblx0fVxuXHRcblx0Y2hlY2tQcmV2RGlyZWN0aW9uKCkge1xuXHRcdC8vIERpcmVjdGlvbiBzYWZlZ3VhcmRcblx0XHRzd2l0Y2ggKHRoaXMucHJldkRpcmVjdGlvbikge1xuXHRcdFx0Y2FzZSBESVJFQ1RJT04uVVA6XG5cdFx0XHRcdGlmICh0aGlzLmRpcmVjdGlvbiA9PSBESVJFQ1RJT04uRE9XTikge1xuXHRcdFx0XHRcdHRoaXMuZGlyZWN0aW9uID0gRElSRUNUSU9OLlVQO1xuXHRcdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRcdGNhc2UgRElSRUNUSU9OLlJJR0hUOlxuXHRcdFx0XHRpZiAodGhpcy5kaXJlY3Rpb24gPT0gRElSRUNUSU9OLkxFRlQpIHtcblx0XHRcdFx0XHR0aGlzLmRpcmVjdGlvbiA9IERJUkVDVElPTi5SSUdIVDtcblx0XHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIERJUkVDVElPTi5ET1dOOlxuXHRcdFx0XHRpZiAodGhpcy5kaXJlY3Rpb24gPT0gRElSRUNUSU9OLlVQKSB7XG5cdFx0XHRcdFx0dGhpcy5kaXJlY3Rpb24gPSBESVJFQ1RJT04uRE9XTjtcblx0XHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIERJUkVDVElPTi5MRUZUOlxuXHRcdFx0XHRpZiAodGhpcy5kaXJlY3Rpb24gPT0gRElSRUNUSU9OLlJJR0hUKSB7XG5cdFx0XHRcdFx0dGhpcy5kaXJlY3Rpb24gPSBESVJFQ1RJT04uTEVGVDtcblx0XHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0ZHJhdyhjdHgsIHNjcmVlbikge1xuXHRcdGN0eC5maWxsU3R5bGUgPSBDT0xPVVI7XG5cblx0XHR0aGlzLmJvZHkubWFwKGUgPT4ge1xuXHRcdFx0Ly8gV3JhcCBhY2NvcmRpbmcgdG8gc2NyZWVuIHNpemVcblx0XHRcdGVbMF0gPSB0aGlzLndyYXBUaWxlKHNjcmVlbi53aWR0aCwgVElMRV9XLCBlWzBdKTtcblx0XHRcdGVbMV0gPSB0aGlzLndyYXBUaWxlKHNjcmVlbi5oZWlnaHQsIFRJTEVfSCwgZVsxXSk7XG5cdFx0XHRjdHguZmlsbFJlY3QoZVswXSwgZVsxXSwgVElMRV9XLCBUSUxFX0gpO1xuXHRcdH0pO1xuXHR9XG5cblx0d3JhcFRpbGUobWF4LCB0aWxlLCBwb3MpIHtcblx0XHRpZiAocG9zID49IG1heCkge1xuXHRcdFx0cmV0dXJuIHBvcyAtIG1heDtcblx0XHR9IGVsc2UgaWYgKHBvcyA8IDApIHtcblx0XHRcdHJldHVybiBtYXggLSB0aWxlXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBwb3M7XG5cdFx0fVxuXHR9XG5cblx0aGFuZGxlS2V5RG93bihldmVudCkge1xuXHRcdHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuXHRcdFx0Y2FzZSBLRVlTLkFSUk9XX1VQOlxuXHRcdFx0XHR0aGlzLmRpcmVjdGlvbiA9IERJUkVDVElPTi5VUDtcblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBLRVlTLkFSUk9XX1JJR0hUOlxuXHRcdFx0XHR0aGlzLmRpcmVjdGlvbiA9IERJUkVDVElPTi5SSUdIVDtcblx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBLRVlTLkFSUk9XX0RPV046XG5cdFx0XHRcdHRoaXMuZGlyZWN0aW9uID0gRElSRUNUSU9OLkRPV047XG5cdFx0XHRicmVhaztcblx0XHRcdGNhc2UgS0VZUy5BUlJPV19MRUZUOlxuXHRcdFx0XHR0aGlzLmRpcmVjdGlvbiA9IERJUkVDVElPTi5MRUZUO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Z2V0Qm9keSgpIHtcblx0XHRyZXR1cm4gdGhpcy5ib2R5O1xuXHR9XG59XG4iLCJpbXBvcnQgZ2xvYmFscyBmcm9tICcuL2dsb2JhbHMuanMnO1xuXG5jb25zdCBDT0xPVVIgPSAnI0RFNEY2MCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcGxlIHtcblx0Y29uc3RydWN0b3IoeCwgeSkge1xuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0fVxuXHRcblx0ZHJhdyhjdHgpIHtcblx0XHRjdHguZmlsbFN0eWxlID0gQ09MT1VSO1xuXHRcdGN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgZ2xvYmFscy5USUxFX1csIGdsb2JhbHMuVElMRV9IKTtcblx0fVxuXHRcblx0Z2V0WCgpIHtcblx0XHRyZXR1cm4gdGhpcy54O1xuXHR9XG5cdFxuXHRnZXRZKCkge1xuXHRcdHJldHVybiB0aGlzLnk7XG5cdH1cbn1cbiIsImltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscy5qcyc7XG5pbXBvcnQgU25ha2UgZnJvbSAnLi9zbmFrZS5qcyc7XG5pbXBvcnQgQXBwbGUgZnJvbSAnLi9hcHBsZS5qcyc7XG5cbmltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5jb25zdCBUSUxFX1cgPSBnbG9iYWxzLlRJTEVfVztcbmNvbnN0IFRJTEVfSCA9IGdsb2JhbHMuVElMRV9IO1xuY29uc3QgRlBTID0gMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNhbnZhcygpIHtcblx0bGV0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNjcmVlblwiKTtcblxuXHRyZXR1cm4gZWxlbWVudDtcbn1cblxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjcmVhdGVDYW52YXMoKSk7XG5cbnZhciBzY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNjcmVlblwiKTtcbnZhciBjdHggPSBzY3JlZW4uZ2V0Q29udGV4dChcIjJkXCIpO1xuY29uc29sZS5sb2coc2NyZWVuLndpZHRoLCBzY3JlZW4uaGVpZ2h0KTtcblxuZnVuY3Rpb24gcmFuZG9tUG9zWCgpIHtcblx0cmV0dXJuIE1hdGgudHJ1bmMoTWF0aC5yYW5kb20oMSkgKiAoc2NyZWVuLndpZHRoIC8gVElMRV9XKSkgKiBUSUxFX1c7XG59XG5mdW5jdGlvbiByYW5kb21Qb3NZKCkge1xuXHRyZXR1cm4gTWF0aC50cnVuYyhNYXRoLnJhbmRvbSgxKSAqIChzY3JlZW4uaGVpZ2h0IC8gVElMRV9IKSkgKiBUSUxFX0g7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQXBwbGUoc25ha2UpIHtcblx0bGV0IGFwcGxlWCA9IHJhbmRvbVBvc1goKTtcblx0bGV0IGFwcGxlWSA9IHJhbmRvbVBvc1koKTtcblx0XG5cdC8vIFdoaWxlIGFwcGxlIGlzIGluc2lkZSBib2R5IG9mIHNuYWtlLCBnZW5lcmF0ZSBuZXcgcG9zaXRpb25zXG5cdHdoaWxlIChzbmFrZS5pc0luc2lkZUJvZHkoYXBwbGVYLCBhcHBsZVkpKSB7XG5cdFx0YXBwbGVYID0gcmFuZG9tUG9zWCgpO1xuXHRcdGFwcGxlWSA9IHJhbmRvbVBvc1koKTtcblx0fVxuXHRcblx0cmV0dXJuIG5ldyBBcHBsZShhcHBsZVgsIGFwcGxlWSk7XG59XG5cbmZ1bmN0aW9uIG1haW4oKSB7XG5cdGxldCBzbmFrZSA9IG5ldyBTbmFrZShzY3JlZW4ud2lkdGggLyAyLCBzY3JlZW4uaGVpZ2h0IC8gMik7XG5cdGxldCBhcHBsZSA9IGdlbmVyYXRlQXBwbGUoc25ha2UpO1xuXHRsZXQgc2NvcmUgPSAwO1xuXHRcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGV2ZW50ID0+IHtcblx0XHRzbmFrZS5oYW5kbGVLZXlEb3duKGV2ZW50KTtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9KTtcblx0XG5cdGxldCBsb29wID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdHNuYWtlLm1vdmUoKTtcblx0XHRcblx0XHQvLyBDb2xsaXNpb24gZGV0ZWN0aW9uXG5cdFx0aWYgKHNuYWtlLmhlYWRJc0luQm9keSgpKSB7XG5cdFx0XHQvLyBHYW1lIG92ZXIhXG5cdFx0XHRjdHguc3Ryb2tlVGV4dChcIkdhbWUgb3ZlciFcIiwgKHNjcmVlbi53aWR0aCAvIDIpIC0gMjAsIHNjcmVlbi5oZWlnaHQgLyAyKVxuXHRcdFx0d2luZG93LmNsZWFySW50ZXJ2YWwobG9vcCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdC8vIEVhdGluZyBhcHBsZVxuXHRcdGlmIChzbmFrZS5pc0luc2lkZUJvZHkoYXBwbGUuZ2V0WCgpLCBhcHBsZS5nZXRZKCkpKSB7XG5cdFx0XHRzY29yZSArPSAxMDtcblx0XHRcdHNuYWtlLmVhdCgpO1xuXHRcdFx0YXBwbGUgPSBnZW5lcmF0ZUFwcGxlKHNuYWtlKTtcblx0XHR9XG5cdFxuXHRcdC8vIERyYXdcdFxuXHRcdGN0eC5jbGVhclJlY3QoMCwgMCwgc2NyZWVuLndpZHRoLCBzY3JlZW4uaGVpZ2h0KTtcblx0XHRzbmFrZS5kcmF3KGN0eCwgc2NyZWVuKTtcblx0XHRhcHBsZS5kcmF3KGN0eCk7XG5cdFx0Y3R4LnN0cm9rZVRleHQoYFNjb3JlOiAke3Njb3JlfWAsIDAsIDEwKVxuXHR9LCAxIC8gRlBTICogMTAwMCk7XG59XG5cbm1haW4oKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=