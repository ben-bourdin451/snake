!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var i=n(1),r=n(2);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1};i(r,o);e.exports=r.locals||{}},function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},i=[],r=0;r<e.length;r++){var o=e[r],c=t.base?o[0]+t.base:o[0],d=n[c]||0,u="".concat(c," ").concat(d);n[c]=d+1;var l=s(u),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(a[l].references++,a[l].updater(h)):a.push({identifier:u,updater:v(h,t),references:1}),i.push(u)}return i}function d(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,l=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function h(e,t,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=l(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var p=null,y=0;function v(e,t){var n,i,r;if(t.singleton){var o=y++;n=p||(p=d(t)),i=h.bind(null,n,o,!1),r=h.bind(null,n,o,!0)}else n=d(t),i=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var r=s(n[i]);a[r].references--}for(var o=c(e,t),d=0;d<n.length;d++){var u=s(n[d]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=o}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,"canvas {\n\tborder: 1px solid #000000;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(a=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);i&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.r(t);var i=10,r=10;const o=i,a=r,s=1,c=2,d=3,u=4,l=37,h=38,f=39,p=40;class y{constructor(e,t,n=4){this.body=[[e,t]],this.length=n,this.prevDirection=s,this.direction=s,this.eating=!1;for(let e=1;e<n;e++)this.grow(s)}addBody(e,t){this.body.unshift([e,t])}eat(){this.eating=!0}headIsInBody(){return this.body.reduce((e,t,n)=>0!=n&&(e||t[0]===this.body[0][0]&&t[1]===this.body[0][1]),!1)}isInsideBody(e,t){return this.body.reduce((n,i)=>n||i[0]===e&&i[1]===t,!1)}grow(e){switch(e){case s:this.addBody(this.body[0][0],this.body[0][1]-a);break;case c:this.addBody(this.body[0][0]+a,this.body[0][1]);break;case d:this.addBody(this.body[0][0],this.body[0][1]+a);break;case u:this.addBody(this.body[0][0]-a,this.body[0][1])}}move(){this.checkPrevDirection(),this.grow(this.direction),this.eating?this.eating=!1:this.body.pop(),this.prevDirection=this.direction}checkPrevDirection(){switch(this.prevDirection){case s:this.direction==d&&(this.direction=s);break;case c:this.direction==u&&(this.direction=c);break;case d:this.direction==s&&(this.direction=d);break;case u:this.direction==c&&(this.direction=u)}}draw(e,t){e.fillStyle="#6B9E7D",this.body.map(n=>{n[0]=this.wrapTile(t.width,o,n[0]),n[1]=this.wrapTile(t.height,a,n[1]),e.fillRect(n[0],n[1],o,a)})}wrapTile(e,t,n){return n>=e?n-e:n<0?e-t:n}handleKeyDown(e){switch(e.keyCode){case h:this.direction=s;break;case f:this.direction=c;break;case p:this.direction=d;break;case l:this.direction=u}}getBody(){return this.body}}class v{constructor(e,t){this.x=e,this.y=t}draw(e){e.fillStyle="#DE4F60",e.fillRect(this.x,this.y,i,r)}getX(){return this.x}getY(){return this.y}}n(0);const b=i,g=r,m=new URLSearchParams(window.location.search);document.body.appendChild(function(){let e=document.createElement("canvas");e.setAttribute("id","screen");const t=m.get("w")||500,n=m.get("h")||300;return e.setAttribute("width",t),e.setAttribute("height",n),e}());var w=document.getElementById("screen"),x=w.getContext("2d");function S(){return Math.trunc(Math.random(1)*(w.width/b))*b}function M(){return Math.trunc(Math.random(1)*(w.height/g))*g}function j(e){let t=S(),n=M();for(;e.isInsideBody(t,n);)t=S(),n=M();return new v(t,n)}console.log(w.width,w.height),function(){let e=new y(w.width/2,w.height/2),t=j(e),n=0;window.addEventListener("keydown",t=>{e.handleKeyDown(t),t.preventDefault()});let i=setInterval(()=>{if(e.move(),e.headIsInBody())return x.font="20px sans-serif",x.fillText("Game over!",w.width/2-50,w.height/2),void window.clearInterval(i);e.isInsideBody(t.getX(),t.getY())&&(n+=10,e.eat(),t=j(e)),x.clearRect(0,0,w.width,w.height),e.draw(x,w),t.draw(x),x.strokeStyle="#ffa86a",x.font="20px sans-serif",x.fillText(""+n,5,20)},1/12*1e3)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,