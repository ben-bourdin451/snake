!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var r=n(1),i=n(2);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],c=t.base?o[0]+t.base:o[0],d=n[c]||0,u="".concat(c," ").concat(d);n[c]=d+1;var h=s(u),l={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(a[h].references++,a[h].updater(l)):a.push({identifier:u,updater:v(l,t),references:1}),r.push(u)}return r}function d(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function l(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,y=0;function v(e,t){var n,r,i;if(t.singleton){var o=y++;n=p||(p=d(t)),r=l.bind(null,n,o,!1),i=l.bind(null,n,o,!0)}else n=d(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=s(n[r]);a[i].references--}for(var o=c(e,t),d=0;d<n.length;d++){var u=s(n[d]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=o}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,"canvas {\n\tborder: 1px solid #000000;\n\theight: 300px;\n\twidth: 500px;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.r(t);var r=10,i=10;const o=r,a=i,s=1,c=2,d=3,u=4,h=37,l=38,f=39,p=40;class y{constructor(e,t,n=4){this.body=[[e,t]],this.length=n,this.prevDirection=s,this.direction=s,this.eating=!1;for(let e=1;e<n;e++)this.grow(s)}addBody(e,t){this.body.unshift([e,t])}eat(){this.eating=!0}headIsInBody(){return this.body.reduce((e,t,n)=>0!=n&&(e||t[0]===this.body[0][0]&&t[1]===this.body[0][1]),!1)}isInsideBody(e,t){return this.body.reduce((n,r)=>n||r[0]===e&&r[1]===t,!1)}grow(e){switch(e){case s:this.addBody(this.body[0][0],this.body[0][1]-a);break;case c:this.addBody(this.body[0][0]+a,this.body[0][1]);break;case d:this.addBody(this.body[0][0],this.body[0][1]+a);break;case u:this.addBody(this.body[0][0]-a,this.body[0][1])}}move(){this.checkPrevDirection(),this.grow(this.direction),this.eating?this.eating=!1:this.body.pop(),this.prevDirection=this.direction}checkPrevDirection(){switch(this.prevDirection){case s:this.direction==d&&(this.direction=s);break;case c:this.direction==u&&(this.direction=c);break;case d:this.direction==s&&(this.direction=d);break;case u:this.direction==c&&(this.direction=u)}}draw(e,t){e.fillStyle="#6B9E7D",this.body.map(n=>{n[0]=this.wrapTile(t.width,o,n[0]),n[1]=this.wrapTile(t.height,a,n[1]),e.fillRect(n[0],n[1],o,a)})}wrapTile(e,t,n){return n>=e?n-e:n<0?e-t:n}handleKeyDown(e){switch(e.keyCode){case l:this.direction=s;break;case f:this.direction=c;break;case p:this.direction=d;break;case h:this.direction=u}}getBody(){return this.body}}class v{constructor(e,t){this.x=e,this.y=t}draw(e){e.fillStyle="#DE4F60",e.fillRect(this.x,this.y,r,i)}getX(){return this.x}getY(){return this.y}}n(0);const b=r,g=i;document.body.appendChild(function(){let e=document.createElement("canvas");return e.setAttribute("id","screen"),e}());var m=document.getElementById("screen"),w=m.getContext("2d");function x(){return Math.trunc(Math.random(1)*(m.width/b))*b}function k(){return Math.trunc(Math.random(1)*(m.height/g))*g}function M(e){let t=x(),n=k();for(;e.isInsideBody(t,n);)t=x(),n=k();return new v(t,n)}console.log(m.width,m.height),function(){let e=new y(m.width/2,m.height/2),t=M(e),n=0;window.addEventListener("keydown",t=>{e.handleKeyDown(t),t.preventDefault()});let r=setInterval(()=>{if(e.move(),e.headIsInBody())return w.font="10px sans-serif",w.strokeText("Game over!",m.width/2-20,m.height/2),void window.clearInterval(r);e.isInsideBody(t.getX(),t.getY())&&(n+=10,e.eat(),t=M(e)),w.clearRect(0,0,m.width,m.height),e.draw(w,m),t.draw(w),w.strokeStyle="#ffa86a",w.font="8px sans-serif",w.strokeText(""+n,2,10)},1/12*1e3)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,